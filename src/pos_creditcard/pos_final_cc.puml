@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Main {
{static} main(args:String[])
}

class PointOfSale {
    - productCatalog: ProductCatalog
    - sales: ArrayList<Sale>
    - idLastSale: int
    - cashBox: CashBox
    - changeMaker: ChangeMaker
    + PointOfSale()
    + makeNewSale(): int
    + addLineItemToSale(idSale: int, productName: String, quantity: int): void
    + printReceiptOfSale(saleId: int): void
    + payOneSaleCash(saleId: int, moneyHanded: Map<Double,Integer>): void
    + payOneSaleCreditCard(saleId: int, ccnumber: String): void
    + printPayment(saleId: int): void
    + isSalePaid(id: int): boolean
    + getProductNames(): ArrayList<String>
    - searchSaleById(int id) : Sale
  }


 class ProductCatalog {
    - productSpecifications: ArrayList<ProductSpecification>
    + ProductCatalog(fileName: String)
    + searchByName(name: String): ProductSpecification
    + getProductNames(): ArrayList<String>
    - addProductSpecification(String name, double price): void
  }


note left of ProductCatalog::ProductCatalog {
text file with
Coca-cola 1.20
Nestea    1.50
Moritz    1.90
...
}

class ProductSpecification {
    - name: String
    - price: double
    + getName(): String
    + getPrice(): double
    + ProductSpecification(String name, double price)
}


class Sale {
    - id: int
    - isPaid: boolean
    - dateTime: java.time.LocalDateTime
    - saleLineItems: ArrayList<SaleLineItem>
    - payment: Payment
    + getId(): int
    + addLineItem(ps: ProductSpecification, quantity: int): void
    + total(): double
    + printReceipt(): void
    + payCash(moneyHanded: Map<Double,Integer>, cashBox: CashBox, changeMaker: ChangeMaker): void
    + payCreditCard(ccnumber: String): void
    + printPayment(): void
    + isPaid(): boolean
}


class SaleLineItem {
    - productSpecification: ProductSpecification
    - quantity: int
    + SaleLineItem(ProductSpecification productSpecification, int quantity)
    + incrementQuantity(qty: int): void
    + subtotal(): double
    + print(): void
    + getQuantity(): int
}


abstract class Payment {
  # amountToPay : double
  + Payment(amountToPay : double)
  + {abstract} print()
}

class PaymentInCash extends Payment {
    - cashBox: CashBox
    - changeMaker: ChangeMaker
    - moneyHanded: Map<Double,Integer>
    - changeGiven: Map<Double,Integer>
    + PaymentInCash(double amountToPay, CashBox cashBox, ChangeMaker changeMaker)
    + processPayment(moneyHanded: Map<Double,Integer>): void
    + print(): void
    + totalHanded():double
}

class PaymentCreditCard extends Payment {
    - ccnumber: String
    - authorized: boolean
    - CC_LIMIT: double
    + PaymentCreditCard(String ccnumber, double amountToPay)
    + isAuthorized(): boolean
    + authorize(): boolean
    + print(): void
}

interface ChangeMaker {
    + makeChange(changeAmount: double, cashBox: Map<Double,Integer>): Map<Double,Integer>
}

class GreedyChangeMaker implements ChangeMaker{
    # makeChange(changeAmount: double, cashBox: Map<Double,Integer>): Map<Double,Integer>
}

class RandomChangeMaker implements ChangeMaker{
    # makeChange(changeAmount: double, cashBox: Map<Double,Integer>): Map<Double,Integer>
}

class CashBox {
    - contents: Map<Double,Integer>
    - CashBox()
    + getContentsCopy(): Map<Double,Integer>
    + addMoney(money: Map<Double,Integer>): void
    + subtractMoney(money: Map<Double,Integer>): void
    + printContents(): void
}


PointOfSale o--> "*" Sale : sales
Sale --> "0,1" Payment : payment
Sale *--> "*" SaleLineItem : saleLineItems
SaleLineItem --> "1" ProductSpecification : productSpecification
PointOfSale --> "1" ProductCatalog : productCatalog
ProductCatalog o--> " * " ProductSpecification : productSpecifications
PointOfSale *--> CashBox : cashBox
PaymentInCash ..> ChangeMaker : uses

@enduml